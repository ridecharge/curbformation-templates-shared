{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": " v1.0 Creates an Autoscaling HA pair of Instances for a Service",
  "Parameters": {
    "Environment": {
      "Description": "Name of the environment to launch services into.",
      "Type": "String",
      "MinLength": "4",
      "MaxLength": "8",
      "AllowedPattern": "[a-z0-9]*",
      "ConstraintDescription": "Can contain 4 to 8 lower case alphanumeric characters."
    },
    "DockerRepository": {
      "Type": "String"
    },
    "Deploying": {
      "Type": "String",
      "Description": "Whether the deployment is currently in the deploying state",
      "AllowedValues": [
        "True",
        "False"
      ],
      "Default": "False"
    },
    "DeployedAsg": {
      "Type": "String",
      "Description": "The AutoScalingGroup that is considered deployed.",
      "AllowedValues": [
        "A",
        "B"
      ],
      "Default": "A"
    },
    "InstanceType": {
      "Description": "Instance type for instance pair.",
      "Type": "String",
      "Default": "m3.medium",
      "AllowedValues": [
        "c4.large",
        "m3.medium"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "SecurityGroups": {
      "Description": "Security Groups for the instances",
      "Type": "CommaDelimitedList"
    },
    "TerminationPolicy": {
      "Type": "String",
      "Default": "NewestInstance"
    },
    "InstanceProfile": {
      "Description": "IAM Instance Profile for instances",
      "Type": "String"
    },
    "AvailabilityZones": {
      "Description": "AvailabilityZones to launch networking stacks into.",
      "Type": "CommaDelimitedList"
    },
    "LogglyToken": {
      "Type": "String"
    },
    "NewRelicToken": {
      "Type": "String"
    },
    "Subnets": {
      "Description": "Subnets to launch NATs into.",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "ImageId": {
      "Description": "AMI to create instances.",
      "Type": "String",
      "AllowedPattern": "ami-[a-z0-9]{8}",
      "ConstraintDescription": "Must be a valid ami id"
    },
    "VpcName": {
      "Description": "Name of the vpc this nat is created in.",
      "Type": "String"
    },
    "UserData": {
      "Description": "Userdata to pass to instance startup.",
      "Type": "String",
      "Default": ""
    },
    "Role": {
      "Type": "String",
      "AllowedValues": [
        "nat",
        "bastion",
        "ntp"
      ]
    },
    "TemplateURLPrefix": {
      "Type": "String"
    },
    "Serial": {
      "Type": "String",
      "Default": ""
    }
  },
  "Conditions": {
    "IsDeploying": {
      "Fn::Equals": [
        {
          "Ref": "Deploying"
        },
        "True"
      ]
    },
    "PrimaryAsgA": {
      "Fn::Equals": [
        {
          "Ref": "DeployedAsg"
        },
        "A"
      ]
    },
    "PrimaryAsgB": {
      "Fn::Equals": [
        {
          "Ref": "DeployedAsg"
        },
        "B"
      ]
    },
    "CreateAsgA": {
      "Fn::Or": [
        {
          "Condition": "IsDeploying"
        },
        {
          "Condition": "PrimaryAsgA"
        }
      ]
    },
    "CreateAsgB": {
      "Fn::Or": [
        {
          "Condition": "IsDeploying"
        },
        {
          "Condition": "PrimaryAsgB"
        }
      ]
    },
    "UsePreviousAsgA": {
      "Fn::And": [
        {
          "Condition": "IsDeploying"
        },
        {
          "Condition": "PrimaryAsgB"
        }
      ]
    },
    "UsePreviousAsgB": {
      "Fn::And": [
        {
          "Condition": "IsDeploying"
        },
        {
          "Condition": "PrimaryAsgA"
        }
      ]
    }
  },
  "Mappings": {
    "Roles": {
      "nat": {
        "public": true,
        "MaxSize": "4",
        "MinInstancesInService": "2",
        "MaxBatchSize": "2"
      },
      "bastion": {
        "public": false,
        "MaxSize": "2",
        "MinInstancesInService": "1",
        "MaxBatchSize": "1"
      },
      "ntp": {
        "public": false,
        "MaxSize": "2",
        "MinInstancesInService": "1",
        "MaxBatchSize": "1"
      }
    }
  },
  "Outputs": {
    "AutoScalingGroupName": {
      "Value": {
        "Ref": "AutoScalingGroup"
      }
    }
  },
  "Resources": {
    "AutoScalingAlarms": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "Environment": {
            "Ref": "Environment"
          },
          "Role": {
            "Ref": "Role"
          },
          "AutoScalingGroupName": {
            "Fn::If": [
              "PrimaryAsgA",
              {
                "Ref": "AutoScalingGroup"
              },
              {
                "Ref": "AutoScalingGroupB"
              }
            ]
          },
          "AlarmName": {
            "Fn::Join": [
              "-",
              [
                {
                  "Ref": "Environment"
                },
                {
                  "Ref": "VpcName"
                },
                {
                  "Ref": "Role"
                }
              ]
            ]
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Ref": "TemplateURLPrefix"
              },
              "services/alarms/autoscaling_alarms.json"
            ]
          ]
        },
        "TimeoutInMinutes": "10"
      }
    },
    "AsgSnsTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "Environment"
              },
              {
                "Ref": "VpcName"
              },
              {
                "Ref": "Role"
              },
              "autoscaling-notifications"
            ]
          ]
        }
      }
    },
    "AsgLaunchConfiguration": {
      "Condition": "CreateAsgA",
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": {
          "Fn::FindInMap": [
            "Roles",
            {
              "Ref": "Role"
            },
            "public"
          ]
        },
        "EbsOptimized": false,
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "ImageId": {
          "Fn::If": [
            "UsePreviousAsgA",
            {
              "Ref": "PreviousImageId"
            },
            {
              "Ref": "ImageId"
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "Environment"
        },
        "SecurityGroups": {
          "Ref": "SecurityGroups"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/sh",
                "\nexport DOCKER_REPO=",
                {
                  "Ref": "DockerRepository"
                },
                "\nexport SERIAL=",
                {
                  "Ref": "Serial"
                },
                "\nexport LOGGLY_TOKEN=",
                {
                  "Ref": "LogglyToken"
                },
                "\nexport NR_TOKEN=",
                {
                  "Ref": "NewRelicToken"
                },
                "\nexport ENVIRONMENT=",
                {
                  "Ref": "Environment"
                },
                "\n",
                {
                  "Ref": "UserData"
                }
              ]
            ]
          }
        }
      }
    },
    "AutoScalingGroup": {
      "Condition": "CreateAsgA",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": {
            "Fn::FindInMap": [
              "Roles",
              {
                "Ref": "Role"
              },
              "MinInstancesInService"
            ]
          },
          "MaxBatchSize": {
            "Fn::FindInMap": [
              "Roles",
              {
                "Ref": "Role"
              },
              "MaxBatchSize"
            ]
          },
          "PauseTime": "PT4M0S"
        }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Ref": "AvailabilityZones"
        },
        "NotificationConfiguration": {
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
            "autoscaling:TEST_NOTIFICATION"
          ],
          "TopicARN": {
            "Ref": "AsgSnsTopic"
          }
        },
        "TerminationPolicies": [
          {
            "Ref": "TerminationPolicy"
          }
        ],
        "Cooldown": "30",
        "DesiredCapacity": "2",
        "HealthCheckGracePeriod": "30",
        "HealthCheckType": "EC2",
        "LaunchConfigurationName": {
          "Ref": "AsgLaunchConfiguration"
        },
        "MaxSize": {
          "Fn::FindInMap": [
            "Roles",
            {
              "Ref": "Role"
            },
            "MaxSize"
          ]
        },
        "MinSize": "2",
        "VPCZoneIdentifier": {
          "Ref": "Subnets"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "Environment"
                  },
                  {
                    "Ref": "VpcName"
                  },
                  {
                    "Ref": "Role"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Role",
            "Value": {
              "Ref": "Role"
            },
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "AsgLaunchConfigurationB": {
      "Condition": "CreateAsgB",
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": {
          "Fn::FindInMap": [
            "Roles",
            {
              "Ref": "Role"
            },
            "public"
          ]
        },
        "EbsOptimized": false,
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "ImageId": {
          "Fn::If": [
            "UsePreviousAsgA",
            {
              "Ref": "PreviousImageId"
            },
            {
              "Ref": "ImageId"
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "Environment"
        },
        "SecurityGroups": {
          "Ref": "SecurityGroups"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/sh",
                "\nexport DOCKER_REPO=",
                {
                  "Ref": "DockerRepository"
                },
                "\nexport SERIAL=",
                {
                  "Ref": "Serial"
                },
                "\nexport LOGGLY_TOKEN=",
                {
                  "Ref": "LogglyToken"
                },
                "\nexport NR_TOKEN=",
                {
                  "Ref": "NewRelicToken"
                },
                "\nexport ENVIRONMENT=",
                {
                  "Ref": "Environment"
                },
                "\n",
                {
                  "Ref": "UserData"
                }
              ]
            ]
          }
        }
      }
    },
    "AutoScalingGroupB": {
      "Condition": "CreateAsgB",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": {
            "Fn::FindInMap": [
              "Roles",
              {
                "Ref": "Role"
              },
              "MinInstancesInService"
            ]
          },
          "MaxBatchSize": {
            "Fn::FindInMap": [
              "Roles",
              {
                "Ref": "Role"
              },
              "MaxBatchSize"
            ]
          },
          "PauseTime": "PT4M0S"
        }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Ref": "AvailabilityZones"
        },
        "NotificationConfiguration": {
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
            "autoscaling:TEST_NOTIFICATION"
          ],
          "TopicARN": {
            "Ref": "AsgSnsTopic"
          }
        },
        "TerminationPolicies": [
          {
            "Ref": "TerminationPolicy"
          }
        ],
        "Cooldown": "30",
        "DesiredCapacity": "2",
        "HealthCheckGracePeriod": "30",
        "HealthCheckType": "EC2",
        "LaunchConfigurationName": {
          "Ref": "AsgLaunchConfiguration"
        },
        "MaxSize": {
          "Fn::FindInMap": [
            "Roles",
            {
              "Ref": "Role"
            },
            "MaxSize"
          ]
        },
        "MinSize": "2",
        "VPCZoneIdentifier": {
          "Ref": "Subnets"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "Environment"
                  },
                  {
                    "Ref": "VpcName"
                  },
                  {
                    "Ref": "Role"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Role",
            "Value": {
              "Ref": "Role"
            },
            "PropagateAtLaunch": "true"
          }
        ]
      }
    }
  }
}